@model ML.Empresa
@{
    ViewBag.Title = "Empresa";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css">


<h2>Empresa</h2>

<div class="container text-center">
    <div class="row">
        <div class="col">
            <a href="@Url.Action("FormEmpresa", "Empresa")" class="btn btn-dark">Agregar</a>
        </div>
    </div>
</div>

<div class="container">
    @if (Model.Empresas.Count > 0)
    {
        <div class="row">
            <div class="col-4">
                <div class="card" style="height:500px;">
                    <div class="card-body">
                        <div class="row">
                            <div class="col">
                                <div data-bs-spy="scroll" data-bs-target="#simple-list-example" data-bs-offset="0" data-bs-smooth-scroll="true" class="scrollspy-example" tabindex="0">
                                    <div id="list-example" class="list-group">
                                        @foreach (ML.Empresa empresa in Model.Empresas)
                                        {
                                            <div class="row">
                                                <div class="col-2">
                                                    <a href="@Url.Action("FormEmpresa", "Empresa", new {idEmpresa = empresa.IdEmpresa})" class="btn btn-warning">
                                                        <i class="bi bi-pencil-square"></i>
                                                    </a>
                                                </div>
                                                <div class="col-8">
                                                    <a class="list-group-item list-group-item-action">@empresa.Nombre</a>
                                                </div>

                                                <div class="col-2">
                                                    <a href="@Url.Action("Delete", "Empresa", new {idEmpresa = empresa.IdEmpresa})" class="btn btn-danger">
                                                        <i class="bi bi-x-square"></i>
                                                    </a>
                                                </div>

                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-8">
                @*<gmp-map center="19.42847, -99.12766"
                             zoom="12"
                             map-id="map"
                             style="height: 535px">

                        @foreach (ML.Empresa coordenadasEmpresa in Model.Empresas)
                        {
                            <gmp-advanced-marker position="@coordenadasEmpresa.Latitud, @coordenadasEmpresa.Longitud"
                                                 title="@coordenadasEmpresa.Nombre"></gmp-advanced-marker>
                        }

                    </gmp-map>*@

                <div id="map" style="height:500px"> </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col">
                <div class="alert alert-info" role="alert">
                    No hay información para mostrar
                </div>
            </div>
        </div>
    }
</div>


<script src="~/Scripts/jquery-3.4.1.js"></script>

@*<script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDCt5qUAX_luLPwkcfUOJutLLavQwVFgcA&loading=async&libraries=maps&v=beta,marker">
    </script>*@

@*<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDCt5qUAX_luLPwkcfUOJutLLavQwVFgcA&libraries=maps,marker&v=beta"
    defer></script>*@

<script>
    (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })({
        key: "AIzaSyDCt5qUAX_luLPwkcfUOJutLLavQwVFgcA",
        v: "weekly",
        // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
        // Add other bootstrap parameters as needed, using camel case.
    });
</script>


<script>
    let map;

async function initMap() {
  // [START maps_add_map_instantiate_map]
  // The location of Uluru
    const position = { lat: 19.42847, lng: -99.12766 };
  // Request needed libraries.
  const { Map } = await google.maps.importLibrary("maps");
  const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

  // The map, centered at Uluru
  map = new Map(document.getElementById("map"), {
    zoom: 12,
    center: position,
    mapId: "DEMO_MAP_ID",
  });

  // [END maps_add_map_instantiate_map]
  // [START maps_add_map_instantiate_marker]
  // The marker, positioned at Uluru
  const empresas = @Html.Raw(Json.Encode(Model.Empresas));
        empresas.forEach(empresa => {
            const longitud = empresa.Longitud;
            const latitud = empresa.Latitud;
            const marker = new google.maps.Marker({
                position: new google.maps.LatLng(latitud, longitud),
                map: map
            });
            const infowindow = new google.maps.InfoWindow({
                if(marker) {
                    marker.setMap(null);
                },
                content: `<h6>${empresa.Nombre}</h6><p><strong>Latitud:</strong>${latitud}<strong><br />Longitud:</strong> ${longitud}</p>`,
                ariaLabel: "Uluru",
            });

            marker.addListener("click", () => {
                infowindow.open({
                    anchor: marker,
                    map,
                });
            });
        })
  // [END maps_add_map_instantiate_marker]
}

initMap();
// [END maps_add_map]
</script>


<!--<script>
    // Initialize and add the map
    let map;

    async function initMap() {
  // The location of Uluru
  const position = { lat: -25.344, lng: 131.031 };
  // Request needed libraries.
  const { Map } = await google.maps.importLibrary("maps");
  const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

  // The map, centered at Uluru
  map = new Map(document.getElementById("map"), {
    zoom: 4,
    center: position,
    mapId: "DEMO_MAP_ID",
  });


        @*const empresas = @Html.Raw(Json.Encode(Model.Empresas));
        empresas.forEach(empresa => {
            const longitud = empresa.Longitud;
            const latitud = empresa.Latitud;
            const marker = new google.maps.Marker({
                position: new google.maps.LatLng(latitud, longitud),
                map: map
            });
            const infowindow = new google.maps.InfoWindow({
                content: `<h4>${empresa.Nombre}</h4><p><strong>Latitud:</strong> ${latitud}  <strong>Longitud:</strong> ${longitud}</p>`,
                ariaLabel: "Uluru",
            });

            marker.addListener("click", () => {
                infowindow.open({
                    anchor: marker,
                    map,
                });
            });
        })*@




    <!--}

    initMap();
</script>-->
